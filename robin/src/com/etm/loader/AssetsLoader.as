package com.etm.loader{	import com.etm.core.Etm;	import com.etm.starling.texture.TextureBin;	import com.etm.utils.Reflection;		import flash.display.Bitmap;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.display.MovieClip;	import flash.events.Event;	import flash.net.URLRequest;	import flash.system.LoaderContext;	import flash.system.SecurityDomain;		import starling.textures.Texture;

	/**	 * 资源加载器，用于加载SWF,IMAGE等可视资源	 */	public class AssetsLoader extends AbstractLoader	{		protected var _loader:Loader;		protected var _context:LoaderContext;		/**		 *新建资源加载器实例 		 * @param url 加载资源的地址		 * @param loaderContext 加载上下文		 * 		 */				public function AssetsLoader(url:String,loaderContext:LoaderContext=null)		{			super(url);			_loader=new Loader();			if(loaderContext)				_context=loaderContext;			else			{				if(!Etm.isLocal)					_context=new LoaderContext(false,null,SecurityDomain.currentDomain);			}			addLoaderEventListeners(_loader.contentLoaderInfo);		}		override public function dispose():void		{			try			{				_loader.unloadAndStop();			}			catch(e:Error)			{							}		}		private var _texture:Texture;		private var _textureBin:TextureBin;		public function getTexture():Texture		{			if(_texture)				return _texture;			else if(content is Bitmap)			{				_texture=Texture.fromBitmap(content as Bitmap);				return _texture;			}			else				return null;		}		public function getTextureBin():TextureBin		{			try			{				if(_textureBin)					return _textureBin;				else if(content is MovieClip)				{					_textureBin=new TextureBin(content);					return _textureBin;				}				else					return null;			}			catch(e:Error)			{			}			finally			{				return _textureBin;			}		}		override protected function clear():void		{			removeLoaderEventListeners(_loader.contentLoaderInfo);			super.clear();		}				override protected function doExecute():void		{			super.doExecute();			_loader.load(new URLRequest(_url),_context);		}				override protected function onCompleteHandler(evt:Event):void		{			var loaderInfo:LoaderInfo=evt.target as LoaderInfo;			Reflection.addApplicationDomain(loaderInfo.applicationDomain);			_content=loaderInfo.content;			super.onCompleteHandler(evt);		}					}}